<?php

namespace j\di;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-10-02 at 06:32:44.
 */
class ContainerTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Container
     */
    protected $object;

    protected  $params = [
        'var.b' => "B.value",
        'var.a' => "A.value",
        ];

    protected $conf = [
        'a' => [
            'class' => A::class,
            'arguments' => ['%var.a%'],
            'calls' => [
                ["setObject", ['@b']]
            ],
            'property' => [
                'var3' => 'test for property'
            ]
        ],
        'b' => [
            'class' => B::class,
            'arguments' => ['%var.b%', "B.value2"],
        ]
        ];

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = Container::getInstance();
        $this->object->sets($this->conf);
        $this->object->setParams($this->params);
    }

    public function testParamsAndCall(){
        /** @var A $a */
        $a = $this->object->get('a');

        $this->assertInstanceOf(A::class, $a);
        $this->assertEquals($a->var, $this->params['var.a']);

        /** @var B $b */
        $b = $a->object;
        $this->assertInstanceOf(B::class, $b);
        $this->assertEquals($b->var, $this->params['var.b']);
        $this->assertEquals($b->var2, "B.value2");
        $this->assertEquals($a->var3, 'test for property');
    }

    public function testMethod(){
        /** @var A $a */
        $a = $this->object->get('a');
        $this->assertEquals($this->object->has('a'), true);

        $this->object->sets([
            'c' => C::class
        ]);

        $this->assertTrue($a->hasService('c'));
        $this->assertInstanceOf(C::class, $a->getService('c'));
    }
    
    public function testContainerAwareInterface(){
        /** @var A $a */
        $a = $this->object->get('a');
        $this->assertInstanceOf(Container::class, $a->container);
    }

    public function testFactory(){
        $service = $this->object;
        $service->set("user", new UserFactory(), true);

        /** @var User $b0 */
        $b0 = $service->get("user", 6388);

        $b1 = $service->get("user", 6388);
        $b1->change();

        $this->assertEquals($b0, $b1);
        $this->assertEquals($b0->name, "user6388");
        $this->assertEquals($b1->name, "user6388");

        $b2 = $service->get("user", 123);
        $this->assertEquals($b2->name, null);

        $b2->change();
        $this->assertEquals($b2->name, "user123");
    }
}


class A implements ContainerAwareInterface {
    use ContainerAwareTrait;

    public $var;
    public $object;

    /**
     * A constructor.
     * @param $var
     */
    function __construct($var) {
        $this->var = $var;
    }

    /**
     * @param mixed $object
     */
    public function setObject($object) {
        $this->object = $object;
    }
}

class B {
    public $var;
    public $var2;
    public $var3;

    function __construct($var, $var2) {
        $this->var = $var;
        $this->var2 = $var2;
    }
}

class C {

}

use j\event\TraitManager;
use j\event\Event;

class User{
    use TraitManager;
    public $id;
    public $name;
    /**
     * User constructor.
     * @param $id
     */
    public function __construct($id) {
        $this->id = $id;
    }

    function change(){
        $this->trigger("use.change");
    }
}

class UserFactory{
    private static $instance;

    /**
     * @param Container $container
     * @param $uid
     * @return mixed
     */
    function __invoke($container, $uid) {
        if (!isset(self::$instance[$uid])) {
            $instance = new User($uid);
            $instance->on("use.change", function(Event $e){
                /** @var User $user */
                $user = $e->context;
                $user->name = "user" . $user->id;
            });

            self::$instance[$uid] = $instance;
        }

        return self::$instance[$uid];
    }
}